// <auto-generated />
using System;
using BusinessAutomation.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessAutomation.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230828081327_ModifyTables")]
    partial class ModifyTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.FuelRequisitionEntity.FuelRequisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ApprovalsDoneCounter")
                        .HasColumnType("tinyint");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FuelPurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FuelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasRejection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAcquitted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequisitionStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("RequisitionStatusId");

                    b.HasIndex("VehicleId");

                    b.ToTable("FuelRequisitions");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.FuelTypes.FuelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FuelType");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.RequisitionStatuses.RequisitionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequisitionStatuses");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.VehicleEntity.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mileage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleClassId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.VehicleEntity.VehicleClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FuelConsumption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleClasses");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.VehicleEntity.VehicleRequisition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ApprovalsDoneCounter")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasRejection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAcquitted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequisitionStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RequisitionStatusId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleRequisitions");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.VehicleEntity.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.FuelRequisitionEntity.FuelRequisition", b =>
                {
                    b.HasOne("BusinessAutomation.Domain.Finance.FuelTypes.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessAutomation.Domain.Finance.RequisitionStatuses.RequisitionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("RequisitionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessAutomation.Domain.Finance.VehicleEntity.Vehicle", "Vehicle")
                        .WithMany("FuelRequisitions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelType");

                    b.Navigation("Status");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.VehicleEntity.Vehicle", b =>
                {
                    b.HasOne("BusinessAutomation.Domain.Finance.VehicleEntity.VehicleClass", "VehicleClass")
                        .WithMany()
                        .HasForeignKey("VehicleClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessAutomation.Domain.Finance.VehicleEntity.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleClass");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.VehicleEntity.VehicleRequisition", b =>
                {
                    b.HasOne("BusinessAutomation.Domain.Finance.RequisitionStatuses.RequisitionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("RequisitionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessAutomation.Domain.Finance.VehicleEntity.Vehicle", "Vehicle")
                        .WithMany("VehicleRequisitions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("BusinessAutomation.Domain.Finance.VehicleEntity.Vehicle", b =>
                {
                    b.Navigation("FuelRequisitions");

                    b.Navigation("VehicleRequisitions");
                });
#pragma warning restore 612, 618
        }
    }
}
